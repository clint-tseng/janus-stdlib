// Generated by CoffeeScript 1.11.1
(function() {
  var $, Base, DomView, EnumAttribute, EnumAttributeListEditView, List, ListSelectItemView, Varying, find, from, identity, isArray, mutators, ref, ref1, template,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, from = ref.from, template = ref.template, find = ref.find, mutators = ref.mutators, Base = ref.Base, List = ref.List;

  EnumAttribute = require('janus').attribute.EnumAttribute;

  ref1 = require('janus').util, isArray = ref1.isArray, identity = ref1.identity;

  $ = require('../util/dollar');

  ListSelectItemView = (function(superClass) {
    extend(ListSelectItemView, superClass);

    function ListSelectItemView() {
      return ListSelectItemView.__super__.constructor.apply(this, arguments);
    }

    ListSelectItemView._dom = function() {
      return $('<div> <div class="janus-list-selectItem"> <button class="janus-list-selectItem-select"></button> <div class="janus-list-selectItem-contents"></div> </div> </div>');
    };

    ListSelectItemView._template = template(find('.janus-list-selectItem-select').text(from.self().flatMap(function(view) {
      var base, ref2;
      return (ref2 = typeof (base = view.options).buttonLabel === "function" ? base.buttonLabel(view.subject) : void 0) != null ? ref2 : 'Select';
    })), find('.janus-list-selectItem').classed('checked', from.self().flatMap(function(view) {
      return view.options["enum"].watchValue().map(function(value) {
        return value === view.subject;
      });
    })));

    ListSelectItemView.prototype._render = function() {
      var contentsBinding, dom, wrapper;
      wrapper = this.constructor._dom();
      dom = wrapper.children(':first');
      contentsBinding = this.options.renderItem(mutators.render(from(this.subject)))(dom.find('.janus-list-selectItem-contents'), (function(_this) {
        return function(x) {
          return _this.constructor.point(x, _this);
        };
      })(this));
      this._bindings = this.constructor._template(wrapper)((function(_this) {
        return function(x) {
          return _this.constructor.point(x, _this);
        };
      })(this));
      this._bindings.push(contentsBinding);
      return dom;
    };

    ListSelectItemView.prototype._wireEvents = function() {
      return this.artifact().find('.janus-list-selectItem-select').on('click', (function(_this) {
        return function() {
          return _this.options["enum"].setValue(_this.subject);
        };
      })(this));
    };

    return ListSelectItemView;

  })(DomView);

  EnumAttributeListEditView = (function(superClass) {
    extend(EnumAttributeListEditView, superClass);

    function EnumAttributeListEditView() {
      return EnumAttributeListEditView.__super__.constructor.apply(this, arguments);
    }

    EnumAttributeListEditView._dom = function() {
      return $('<div class="janus-enumSelect"/>');
    };

    EnumAttributeListEditView._template = template(find('div').render(from.self().flatMap(function(view) {
      return Varying.ly(view.subject.values()).map(function(values) {
        if (values == null) {
          return new List();
        } else if (isArray(values)) {
          return new List(values);
        } else if (values.isCollection) {
          return values;
        } else {
          console.error('got an unexpected value for EnumAttribute#values');
          return new List();
        }
      });
    })).options(from.self().map(function(view) {
      var modifiedRenderItem, ogRenderItem, ref2, ref3, renderWrapper;
      ogRenderItem = (ref2 = view.options.renderItem) != null ? ref2 : identity;
      modifiedRenderItem = function(render) {
        return ogRenderItem(render.context('summary'));
      };
      renderWrapper = (ref3 = view.options.renderWrapper) != null ? ref3 : identity;
      return {
        renderItem: (function(_this) {
          return function(render) {
            return renderWrapper(render.context('select-wrapper').options({
              renderItem: modifiedRenderItem,
              "enum": view.subject,
              buttonLabel: view.options.buttonLabel
            }));
          };
        })(this)
      };
    })));

    return EnumAttributeListEditView;

  })(DomView);

  module.exports = {
    EnumAttributeListEditView: EnumAttributeListEditView,
    ListSelectItemView: ListSelectItemView,
    registerWith: function(library) {
      library.register(Number, ListSelectItemView, {
        context: 'select-wrapper'
      });
      library.register(Boolean, ListSelectItemView, {
        context: 'select-wrapper'
      });
      library.register(String, ListSelectItemView, {
        context: 'select-wrapper'
      });
      library.register(Base, ListSelectItemView, {
        context: 'select-wrapper'
      });
      return library.register(EnumAttribute, EnumAttributeListEditView, {
        context: 'edit',
        attributes: {
          style: 'list'
        }
      });
    }
  };

}).call(this);
