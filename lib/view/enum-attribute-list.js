// Generated by CoffeeScript 1.11.1
(function() {
  var $, Base, DomView, Enum, EnumAttributeListEditView, List, Varying, asList, find, from, identity, mutators, ref, template,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, from = ref.from, template = ref.template, find = ref.find, mutators = ref.mutators, Base = ref.Base, List = ref.List;

  Enum = require('janus').attribute.Enum;

  identity = require('janus').util.identity;

  asList = require('../util/util').asList;

  $ = require('janus-dollar');

  EnumAttributeListEditView = (function(superClass) {
    var ref1, values;

    extend(EnumAttributeListEditView, superClass);

    function EnumAttributeListEditView() {
      return EnumAttributeListEditView.__super__.constructor.apply(this, arguments);
    }

    EnumAttributeListEditView.prototype._wireEvents = function() {
      var list;
      list = this.artifact().children(':first');
      list.on('click', '> *', (function(_this) {
        return function(event) {
          if (event.isDefaultPrevented() === true) {
            return;
          }
          return _this.subject.setValue($(event.currentTarget).data('view').subject);
        };
      })(this));
    };

    return EnumAttributeListEditView;

  })(DomView.build($('<div class="janus-enum-select"/>'), template(find('div').render(from.subject().flatMap(function(attr) {
    values = attr.values();
    if (((ref1 = values.all) != null ? ref1.point : void 0) != null) {
      values = values.all.point(attr.model.pointer());
    }
    return Varying.of(values).map(asList);
  })).options(from.self().map(function(view) {
    return view.options;
  })))));

  module.exports = {
    EnumAttributeListEditView: EnumAttributeListEditView,
    registerWith: function(library) {
      return library.register(Enum, EnumAttributeListEditView, {
        context: 'edit',
        style: 'list'
      });
    }
  };

}).call(this);
