// Generated by CoffeeScript 1.11.1
(function() {
  var $, Base, DomView, EnumAttribute, EnumAttributeEditView, List, Varying, find, from, isArray, isPrimitive, ref, ref1, template, uniqueId,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, from = ref.from, template = ref.template, find = ref.find, Base = ref.Base, List = ref.List;

  EnumAttribute = require('janus').attribute.EnumAttribute;

  ref1 = require('janus').util, isArray = ref1.isArray, isPrimitive = ref1.isPrimitive, uniqueId = ref1.uniqueId;

  $ = require('../util/dollar');

  EnumAttributeEditView = (function(superClass) {
    extend(EnumAttributeEditView, superClass);

    function EnumAttributeEditView() {
      return EnumAttributeEditView.__super__.constructor.apply(this, arguments);
    }

    EnumAttributeEditView._dom = function() {
      return $('<select/>');
    };

    EnumAttributeEditView._template = function() {};

    EnumAttributeEditView.prototype._updateVal = function(select) {
      var _id, id, ref2, value;
      if (this._valueMap == null) {
        return;
      }
      ref2 = this._valueMap;
      for (_id in ref2) {
        value = ref2[_id];
        if (value === this.subject.getValue()) {
          id = _id;
          break;
        }
      }
      if (id != null) {
        return select.val(id);
      }
    };

    EnumAttributeEditView.prototype._render = function() {
      var select;
      select = this.constructor._dom();
      this._valueMap = {};
      this._textBindingsMap = {};
      Varying.ly(this.subject.values()).map(function(x) {
        if (x == null) {
          return new List();
        } else if (isArray(x)) {
          return new List(x);
        } else if (x.isCollection) {
          return x;
        } else {
          console.error('got an unexpected value for EnumAttribute#values');
          return new List();
        }
      }).react((function(_this) {
        return function(list) {
          var i, idx, len, option, options, ref2, results;
          _this._removeAll(select);
          if (_this.subject.nullable === true) {
            list = new List([null]).concat(list);
          }
          _this._options = options = list.map(function(item) {
            var id, option, textBinding;
            option = $('<option/>');
            textBinding = Varying.ly(_this.options.stringify != null ? _this.options.stringify(item) : _this.subject.stringify != null ? _this.subject.stringify(item) : item == null ? '' : isPrimitive(item) ? item.toString() : item.toString != null ? item.toString() : item).react(function(text) {
              return option.text(text);
            });
            id = _this._generateId(item);
            option.attr('value', id);
            _this._valueMap[id] = item;
            _this._textBindingsMap[id] = textBinding;
            return option;
          });
          _this.listenTo(options, 'added', function(option, idx) {
            return _this._add(select, option, idx);
          });
          _this.listenTo(options, 'removed', function(option) {
            return _this._remove(option);
          });
          ref2 = options.list;
          results = [];
          for (idx = i = 0, len = ref2.length; i < len; idx = ++i) {
            option = ref2[idx];
            results.push(_this._add(select, option, idx));
          }
          return results;
        };
      })(this));
      return select;
    };

    EnumAttributeEditView.prototype._generateId = function(value) {
      if (value == null) {
        return toString.call(value);
      } else if (isPrimitive(value)) {
        return value.toString();
      } else if (value._id != null) {
        return value._id.toString();
      } else {
        return uniqueId().toString();
      }
    };

    EnumAttributeEditView.prototype._removeAll = function(select) {
      var _, binding, ref2;
      if (this._textBindingsMap != null) {
        ref2 = this._textBindingsMap;
        for (_ in ref2) {
          binding = ref2[_];
          binding.stop();
        }
      }
      this._textBindingsMap = {};
      this._valueMap = {};
      if (this._options != null) {
        this.unlistenTo(this._options);
        this._options.destroy();
      }
      return select.empty();
    };

    EnumAttributeEditView.prototype._add = function(dom, option, idx) {
      var children;
      children = dom.children();
      if (idx === 0) {
        dom.prepend(option);
      } else if (idx === children.length) {
        dom.append(option);
      } else {
        children.eq(idx).before(option);
      }
      return this._updateVal(dom);
    };

    EnumAttributeEditView.prototype._remove = function(option) {
      var id;
      id = option.attr('value');
      this._textBindingsMap[id].stop();
      delete this._textBindingsMap[id];
      delete this._valueMap[id];
      return option.remove();
    };

    EnumAttributeEditView.prototype._wireEvents = function() {
      var select, subject, update;
      select = this.artifact();
      subject = this.subject;
      subject.watchValue().react((function(_this) {
        return function() {
          return _this._updateVal(select);
        };
      })(this));
      update = (function(_this) {
        return function() {
          var selectedOption;
          selectedOption = select.children(':selected');
          if (selectedOption.length === 0) {
            selectedOption = select.children(':first');
          }
          return subject.setValue(_this._valueMap[selectedOption.val()]);
        };
      })(this);
      select.on('change input', update);
      return update();
    };

    return EnumAttributeEditView;

  })(DomView);

  module.exports = {
    EnumAttributeEditView: EnumAttributeEditView,
    registerWith: function(library) {
      return library.register(EnumAttribute, EnumAttributeEditView, {
        context: 'edit'
      });
    }
  };

}).call(this);
