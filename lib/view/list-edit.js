// Generated by CoffeeScript 1.11.1
(function() {
  var $, Base, DomView, List, ListEditItemView, ListEditView, ListView, Varying, find, from, mutators, ref, template,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, mutators = ref.mutators, from = ref.from, template = ref.template, find = ref.find, Base = ref.Base, List = ref.List;

  $ = require('../util/dollar');

  ListView = require('./list').ListView;

  ListEditItemView = (function(superClass) {
    extend(ListEditItemView, superClass);

    function ListEditItemView() {
      return ListEditItemView.__super__.constructor.apply(this, arguments);
    }

    ListEditItemView._dom = function() {
      return $('<div class="janus-list-editItem"> <a class="janus-list-editItem-moveUp">Move Up</a> <a class="janus-list-editItem-moveDown">Move Down</a> <a class="janus-list-editItem-remove">Remove</a> <div class="janus-list-editItem-dragHandle"></div> <div class="janus-list-editItem-contents"></div> </div>');
    };

    ListEditItemView._template = template(find('.janus-list-editItem-moveUp').classed('disabled', from.self().flatMap(function(view) {
      return view.options.list.watchAt(0);
    }).and.self().map(function(view) {
      return view.subject;
    }).all.map(function(first, item) {
      return first === item;
    })), find('.janus-list-editItem-moveDown').classed('disabled', from.self().flatMap(function(view) {
      return view.options.list.watchAt(-1);
    }).and.self().map(function(view) {
      return view.subject;
    }).all.map(function(last, item) {
      return last === item;
    })));

    ListEditItemView.prototype._render = function() {
      var contentsBinding, dom;
      dom = this.constructor._dom();
      contentsBinding = this.options.renderItem(mutators.render(from(this.subject)))(dom.find('.janus-list-editItem-contents'), (function(_this) {
        return function(x) {
          return _this.constructor._point(x, _this);
        };
      })(this));
      this._bindings = this.constructor._template(dom)((function(_this) {
        return function(x) {
          return _this.constructor._point(x, _this);
        };
      })(this));
      this._bindings.push(contentsBinding);
      return dom;
    };

    ListEditItemView.prototype._wireEvents = function() {
      var dom, list, moveHandler, subject;
      dom = this.artifact();
      subject = this.subject;
      list = this.options.list;
      dom.children('.janus-list-editItem-remove').on('click', (function(_this) {
        return function(event) {
          event.preventDefault();
          return list.remove(subject);
        };
      })(this));
      moveHandler = function(direction) {
        return function(event) {
          var children, dest, li, moveButton, parent;
          event.preventDefault();
          moveButton = $(this);
          if (moveButton.hasClass('disabled')) {
            return;
          }
          li = moveButton.closest('li');
          dest = li.prevAll().length + direction;
          list.move(subject, dest);
          parent = li.parent();
          li.detach();
          children = parent.children();
          if (dest === children.length) {
            return parent.append(li);
          } else {
            return children.eq(dest).before(li);
          }
        };
      };
      dom.children('.janus-list-editItem-moveUp').on('click', moveHandler(-1));
      dom.children('.janus-list-editItem-moveDown').on('click', moveHandler(1));
      return this.on('appended', (function(_this) {
        return function() {
          return dom.closest('li').on('janus-itemMoved', function() {
            return list.move(subject, $(_this).prevAll().length);
          });
        };
      })(this));
    };

    return ListEditItemView;

  })(DomView);

  ListEditView = (function(superClass) {
    extend(ListEditView, superClass);

    function ListEditView() {
      return ListEditView.__super__.constructor.apply(this, arguments);
    }

    ListEditView._dom = function() {
      return $('<ul class="janus-list janus-list-edit"/>');
    };

    ListEditView.prototype._initialize = function() {
      var base, modifiedRenderItem, oldRenderItem;
      ListEditView.__super__._initialize.call(this);
      oldRenderItem = this.options.renderItem;
      modifiedRenderItem = function(render) {
        return oldRenderItem(render.context('edit'));
      };
      if ((base = this.options).renderWrapper == null) {
        base.renderWrapper = function(x) {
          return x;
        };
      }
      return this.options.renderItem = (function(_this) {
        return function(render) {
          return _this.options.renderWrapper(render.context('edit-wrapper').options({
            renderItem: modifiedRenderItem,
            list: _this.subject
          }));
        };
      })(this);
    };

    return ListEditView;

  })(ListView);

  module.exports = {
    ListEditItemView: ListEditItemView,
    ListEditView: ListEditView,
    registerWith: function(library) {
      library.register(Number, ListEditItemView, {
        context: 'edit-wrapper'
      });
      library.register(Boolean, ListEditItemView, {
        context: 'edit-wrapper'
      });
      library.register(String, ListEditItemView, {
        context: 'edit-wrapper'
      });
      library.register(Base, ListEditItemView, {
        context: 'edit-wrapper'
      });
      return library.register(List, ListEditView, {
        context: 'edit'
      });
    }
  };

}).call(this);
