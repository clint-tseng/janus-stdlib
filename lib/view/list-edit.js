// Generated by CoffeeScript 1.11.1
(function() {
  var $, Base, DomView, List, ListEditItemView, ListEditView, ListView, Varying, find, from, moveHandler, mutators, ref, template,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, mutators = ref.mutators, from = ref.from, template = ref.template, find = ref.find, Base = ref.Base, List = ref.List;

  $ = require('janus-dollar');

  ListView = require('./list').ListView;

  moveHandler = function(direction) {
    return function(event, subject, view) {
      var moveButton;
      moveButton = $(event.target);
      if (moveButton.hasClass('disabled')) {
        return;
      }
      view.options.list.move(subject, moveButton.parent().prevAll().length + direction);
    };
  };

  ListEditItemView = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype._render = function() {
      return this._doRender(true);
    };

    _Class.prototype._attach = function(dom) {
      this._doRender(false);
    };

    _Class.prototype._doRender = function(immediate) {
      var content, contentBinding, dom, point;
      dom = this.dom();
      content = dom.children().eq(4);
      point = this.pointer();
      contentBinding = this.options.renderItem(mutators.render(from(this.subject)))(content, point, immediate);
      this._bindings = this.preboundTemplate(dom, point);
      this._bindings.push(contentBinding);
      return dom;
    };

    _Class.prototype._wireEvents = function() {
      return this.artifact().on('janus-itemMoved', (function(_this) {
        return function(event) {
          if (event.isDefaultPrevented()) {
            return;
          }
          event.preventDefault();
          return _this.options.list.move(_this.subject, $(event.target).prevAll().length);
        };
      })(this));
    };

    return _Class;

  })(DomView.build($('<div class="janus-list-editItem"> <button class="janus-list-editItem-moveUp">Move Up</button> <button class="janus-list-editItem-moveDown">Move Down</button> <button class="janus-list-editItem-remove">Remove</button> <div class="janus-list-editItem-dragHandle"></div> <div class="janus-list-editItem-contents"></div> </div>'), template(find('.janus-list-editItem-moveUp').classed('disabled', from.self().flatMap(function(view) {
    return view.options.list.at(0);
  }).and.self().map(function(view) {
    return view.subject;
  }).all.map(function(first, item) {
    return first === item;
  })).on('click', moveHandler(-1)), find('.janus-list-editItem-moveDown').classed('disabled', from.self().flatMap(function(view) {
    return view.options.list.at(-1);
  }).and.self().map(function(view) {
    return view.subject;
  }).all.map(function(last, item) {
    return last === item;
  })).on('click', moveHandler(1)), find('.janus-list-editItem-remove').on('click', function(event, subject, view) {
    event.preventDefault();
    return view.options.list.remove(subject);
  }))));

  ListEditView = (function(superClass) {
    extend(ListEditView, superClass);

    function ListEditView() {
      return ListEditView.__super__.constructor.apply(this, arguments);
    }

    ListEditView.prototype.dom = function() {
      return $('<div class="janus-list janus-list-edit"/>');
    };

    ListEditView.prototype._initialize = function() {
      var base, modifiedRenderItem, oldRenderItem;
      ListEditView.__super__._initialize.call(this);
      oldRenderItem = this.options.renderItem;
      modifiedRenderItem = function(render) {
        return oldRenderItem(render.context('edit'));
      };
      if ((base = this.options).renderWrapper == null) {
        base.renderWrapper = function(x) {
          return x;
        };
      }
      return this.options.renderItem = (function(_this) {
        return function(render) {
          return _this.options.renderWrapper(render.context('edit-wrapper').options({
            renderItem: modifiedRenderItem,
            list: _this.subject
          }));
        };
      })(this);
    };

    return ListEditView;

  })(ListView);

  module.exports = {
    ListEditItemView: ListEditItemView,
    ListEditView: ListEditView,
    registerWith: function(library) {
      library.register(Number, ListEditItemView, {
        context: 'edit-wrapper'
      });
      library.register(Boolean, ListEditItemView, {
        context: 'edit-wrapper'
      });
      library.register(String, ListEditItemView, {
        context: 'edit-wrapper'
      });
      library.register(Base, ListEditItemView, {
        context: 'edit-wrapper'
      });
      return library.register(List, ListEditView, {
        context: 'edit'
      });
    }
  };

}).call(this);
