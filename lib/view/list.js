// Generated by CoffeeScript 1.11.1
(function() {
  var $, DomView, List, ListView, Varying, from, identity, insertNode, mutators, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, mutators = ref.mutators, from = ref.from, List = ref.List;

  identity = require('janus').util.identity;

  $ = require('../util/dollar');

  ListView = (function(superClass) {
    extend(ListView, superClass);

    function ListView() {
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.dom = function() {
      return $('<ul class="janus-list"/>');
    };

    ListView.prototype.itemDom = function() {
      return $('<li/>');
    };

    ListView.prototype._initialize = function() {
      var base;
      return (base = this.options).renderItem != null ? base.renderItem : base.renderItem = identity;
    };

    ListView.prototype._render = function() {
      var binding, dom, i, idx, len, point, ref1;
      dom = this.dom();
      point = this.pointer();
      this._mappedBindings = this.subject.map((function(_this) {
        return function(item) {
          var binding, itemDom;
          itemDom = _this.itemDom();
          binding = _this.options.renderItem(mutators.render(from(item)))(itemDom, point);
          binding.dom = itemDom;
          return binding;
        };
      })(this));
      this.listenTo(this._mappedBindings, 'added', (function(_this) {
        return function(binding, idx) {
          var ref1;
          insertNode(dom, binding.dom, idx);
          if (_this._wired === true) {
            return (ref1 = binding.view.get()) != null ? ref1.wireEvents() : void 0;
          }
        };
      })(this));
      this.listenTo(this._mappedBindings, 'removed', function(binding) {
        var ref1;
        if ((ref1 = binding.view.get()) != null) {
          ref1.destroy();
        }
        binding.stop();
        return binding.dom.remove();
      });
      ref1 = this._mappedBindings.list;
      for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
        binding = ref1[idx];
        insertNode(dom, binding.dom, idx);
      }
      return dom;
    };

    ListView.prototype.wireEvents = function() {
      var binding, i, len, ref1, ref2, results;
      if (this._wired === true) {
        return;
      }
      ListView.__super__.wireEvents.call(this);
      ref1 = this._mappedBindings.list;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        binding = ref1[i];
        results.push((ref2 = binding.view.get()) != null ? ref2.wireEvents() : void 0);
      }
      return results;
    };

    ListView.prototype._destroy = function() {
      if (this._artifact != null) {
        this._bindings = this._mappedBindings.list;
        return ListView.__super__._destroy.call(this);
      }
    };

    return ListView;

  })(DomView);

  insertNode = function(dom, itemDom, idx) {
    var children;
    children = dom.children();
    if (idx === 0) {
      return dom.prepend(itemDom);
    } else if (idx === children.length) {
      return dom.append(itemDom);
    } else {
      return children.eq(idx).before(itemDom);
    }
  };

  module.exports = {
    ListView: ListView,
    registerWith: function(library) {
      return library.register(List, ListView);
    }
  };

}).call(this);
