// Generated by CoffeeScript 1.11.1
(function() {
  var $, DomView, List, ListView, Set, SetView, Varying, Wrapper, dummyFrom, empty, identity, mutators, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, mutators = ref.mutators, List = ref.List, Set = ref.Set;

  identity = require('janus').util.identity;

  $ = require('janus-dollar');

  empty = $([]);

  Wrapper = (function() {
    function Wrapper(contents1) {
      this.contents = contents1;
    }

    Wrapper.prototype.children = function() {
      return this.contents;
    };

    Wrapper.prototype.empty = function() {};

    Wrapper.prototype.append = function(appended) {
      return this.contents = appended;
    };

    return Wrapper;

  })();

  dummyFrom = function(item) {
    return {
      all: {
        point: function() {
          return new Varying(item);
        }
      }
    };
  };

  ListView = (function(superClass) {
    extend(ListView, superClass);

    function ListView() {
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.dom = function() {
      return $('<div class="janus-list"/>');
    };

    ListView.prototype._initialize = function() {
      var base;
      this._point = this.pointer();
      return (base = this.options).renderItem != null ? base.renderItem : base.renderItem = identity;
    };

    ListView.prototype._render = function() {
      var binding, dom, i, idx, len, ref1;
      dom = this.dom();
      this._mappedBindings = this.subject.map((function(_this) {
        return function(item) {
          return _this._bindingForItem(item);
        };
      })(this));
      this._hookBindings(dom, this._mappedBindings);
      ref1 = this._mappedBindings.list;
      for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
        binding = ref1[idx];
        dom.append(binding.dom);
      }
      return dom;
    };

    ListView.prototype._attach = function(dom) {
      var bindings, contents, initial, item, length, point, ptr, testBinding;
      point = this.pointer();
      contents = dom.contents();
      if (contents.length === this.subject.length_) {
        bindings = contents.map((function(_this) {
          return function(idx, node) {
            return _this._bindingForItem(_this.subject.list[idx], $(node), false);
          };
        })(this)).get();
      } else {
        ptr = 0;
        bindings = (function() {
          var i, len, ref1, ref2, results;
          ref1 = this.subject.list;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            item = ref1[i];
            testBinding = this._bindingForItem(item);
            length = testBinding.dom.length;
            if ((ref2 = testBinding.view.get()) != null) {
              ref2.destroy();
            }
            results.push(this._bindingForItem(item, $(contents.slice(ptr, (ptr += length))), false));
          }
          return results;
        }).call(this);
      }
      initial = true;
      this._mappedBindings = this.subject.map((function(_this) {
        return function(item) {
          if (initial === true) {
            return bindings.shift();
          } else {
            return _this._bindingForItem(item);
          }
        };
      })(this));
      initial = false;
      this._hookBindings(dom, this._mappedBindings);
    };

    ListView.prototype._hookBindings = function(dom, bindings) {
      this.listenTo(bindings, 'added', (function(_this) {
        return function(binding, idx) {
          var ref1;
          if ((idx + 1) === _this._mappedBindings.length_) {
            dom.append(binding.dom);
          } else {
            _this._mappedBindings.list[idx + 1].dom.eq(0).before(binding.dom);
          }
          if (_this._wired === true) {
            return (ref1 = binding.view.get()) != null ? ref1.wireEvents() : void 0;
          }
        };
      })(this));
      this.listenTo(bindings, 'moved', (function(_this) {
        return function(binding, idx) {
          if ((idx + 1) === _this._mappedBindings.length_) {
            return dom.append(binding.dom);
          } else {
            return _this._mappedBindings.list[idx + 1].dom.eq(0).before(binding.dom);
          }
        };
      })(this));
      this.listenTo(bindings, 'removed', function(binding) {
        var ref1;
        if ((ref1 = binding.view.get()) != null) {
          ref1.destroy();
        }
        binding.stop();
        return binding.dom.remove();
      });
    };

    ListView.prototype._bindingForItem = function(item, node, immediate) {
      var binding, mutator, wrapper;
      if (node == null) {
        node = empty;
      }
      if (immediate == null) {
        immediate = true;
      }
      wrapper = new Wrapper(node);
      mutator = mutators.render(dummyFrom(item));
      binding = this.options.renderItem(mutator)(wrapper, this._point, immediate);
      binding.dom = wrapper.contents;
      return binding;
    };

    ListView.prototype.wireEvents = function() {
      var binding, i, len, ref1, ref2;
      if (this._wired === true) {
        return;
      }
      ListView.__super__.wireEvents.call(this);
      ref1 = this._mappedBindings.list;
      for (i = 0, len = ref1.length; i < len; i++) {
        binding = ref1[i];
        if ((ref2 = binding.view.get()) != null) {
          ref2.wireEvents();
        }
      }
      this._wireObservations = this._mappedBindings.map((function(_this) {
        return function(binding) {
          return _this.reactTo(binding.view, false, function(view) {
            return view.wireEvents();
          });
        };
      })(this));
      this.listenTo(this._wireObservations, 'removed', function(obs) {
        return obs.stop();
      });
    };

    ListView.prototype.__destroy = function() {
      var ref1;
      if (this._mappedBindings != null) {
        this._bindings = this._mappedBindings.list.slice();
        ListView.__super__.__destroy.call(this);
        this._mappedBindings.destroy();
      }
      return (ref1 = this._wireObservations) != null ? ref1.destroy() : void 0;
    };

    return ListView;

  })(DomView);

  SetView = (function(superClass) {
    extend(SetView, superClass);

    function SetView(set, options) {
      SetView.__super__.constructor.call(this, set != null ? set._list : void 0, options);
    }

    return SetView;

  })(ListView);

  module.exports = {
    ListView: ListView,
    SetView: SetView,
    registerWith: function(library) {
      library.register(List, ListView);
      return library.register(Set, SetView);
    }
  };

}).call(this);
