// Generated by CoffeeScript 1.11.1
(function() {
  var $, DomView, List, ListView, Varying, from, mutators, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, mutators = ref.mutators, from = ref.from, List = ref.List;

  $ = require('../util/dollar');

  ListView = (function(superClass) {
    extend(ListView, superClass);

    function ListView() {
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView._dom = function() {
      return $('<ul class="janus-list"/>');
    };

    ListView._itemDom = function() {
      return $('<li/>');
    };

    ListView._template = function() {};

    ListView.prototype._initialize = function() {
      var base;
      return (base = this.options).renderItem != null ? base.renderItem : base.renderItem = function(x) {
        return x;
      };
    };

    ListView.prototype._render = function() {
      var binding, dom, i, idx, len, ref1;
      dom = this.constructor._dom();
      this._mappedBindings = this.subject.map((function(_this) {
        return function(item) {
          var binding, itemDom;
          itemDom = _this.constructor._itemDom();
          binding = _this.options.renderItem(mutators.render(from(item)))(itemDom, function(x) {
            return _this.constructor.point(x, _this);
          });
          binding.dom = itemDom;
          return binding;
        };
      })(this));
      this._bindings = this._mappedBindings.list;
      this.listenTo(this._mappedBindings, 'added', (function(_this) {
        return function(binding, idx) {
          return _this._add(dom, binding.dom, idx);
        };
      })(this));
      this.listenTo(this._mappedBindings, 'removed', (function(_this) {
        return function(binding) {
          return _this._remove(binding);
        };
      })(this));
      ref1 = this._mappedBindings.list;
      for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
        binding = ref1[idx];
        this._add(dom, binding.dom, idx);
      }
      return dom;
    };

    ListView.prototype._add = function(dom, itemDom, idx) {
      var children;
      children = dom.children();
      if (idx === 0) {
        return dom.prepend(itemDom);
      } else if (idx === children.length) {
        return dom.append(itemDom);
      } else {
        return children.eq(idx).before(itemDom);
      }
    };

    ListView.prototype._remove = function(binding) {
      var ref1;
      binding.stop();
      if ((ref1 = binding.dom.data('subview')) != null) {
        ref1.destroy();
      }
      return binding.dom.remove();
    };

    return ListView;

  })(DomView);

  module.exports = {
    ListView: ListView,
    registerWith: function(library) {
      return library.register(List, ListView);
    }
  };

}).call(this);
