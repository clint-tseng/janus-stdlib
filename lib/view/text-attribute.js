// Generated by CoffeeScript 1.11.1
(function() {
  var $, Base, DomView, MultilineTextAttributeEditView, TextAttribute, TextAttributeEditView, Varying, find, from, ref, template,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, from = ref.from, template = ref.template, find = ref.find, Base = ref.Base;

  TextAttribute = require('janus').attribute.TextAttribute;

  $ = require('../util/dollar');

  TextAttributeEditView = (function(superClass) {
    var _updateVal, eventsFor;

    extend(TextAttributeEditView, superClass);

    function TextAttributeEditView() {
      return TextAttributeEditView.__super__.constructor.apply(this, arguments);
    }

    TextAttributeEditView._dom = function() {
      return $('<input/>');
    };

    TextAttributeEditView._template = template(find('input').attr('type', from.self().map(function(view) {
      var ref1;
      return (ref1 = view.options.type) != null ? ref1 : 'text';
    })), find('input').attr('placeholder', from.self().flatMap(function(view) {
      var ref1;
      return (ref1 = view.options.placeholder) != null ? ref1 : '';
    })));

    _updateVal = function(input, subject) {
      if (!input.hasClass('focus')) {
        return input.val(subject.getValue());
      }
    };

    eventsFor = {
      'all': 'input change',
      'commit': 'change'
    };

    TextAttributeEditView.prototype._render = function() {
      var dom;
      dom = TextAttributeEditView.__super__._render.call(this);
      _updateVal(dom, this.subject);
      return dom;
    };

    TextAttributeEditView.prototype._wireEvents = function() {
      var input, ref1, subject;
      input = this.artifact();
      subject = this.subject;
      this.subject.watchValue().reactNow(function() {
        return _updateVal(input, subject);
      });
      input.on('focus', function() {
        return input.addClass('focus');
      });
      input.on('blur', function() {
        return input.removeClass('focus');
      });
      return input.on(eventsFor[(ref1 = this.options.update) != null ? ref1 : 'all'], function() {
        return subject.setValue(input.val());
      });
    };

    return TextAttributeEditView;

  })(DomView);

  MultilineTextAttributeEditView = (function(superClass) {
    extend(MultilineTextAttributeEditView, superClass);

    function MultilineTextAttributeEditView() {
      return MultilineTextAttributeEditView.__super__.constructor.apply(this, arguments);
    }

    MultilineTextAttributeEditView._dom = function() {
      return $('<textarea/>');
    };

    MultilineTextAttributeEditView._template = template(find('textarea').attr('placeholder', from.self().flatMap(function(view) {
      var ref1;
      return (ref1 = view.options.placeholder) != null ? ref1 : '';
    })));

    return MultilineTextAttributeEditView;

  })(TextAttributeEditView);

  module.exports = {
    TextAttributeEditView: TextAttributeEditView,
    MultilineTextAttributeEditView: MultilineTextAttributeEditView,
    registerWith: function(library) {
      library.register(TextAttribute, TextAttributeEditView, {
        context: 'edit'
      });
      return library.register(TextAttribute, MultilineTextAttributeEditView, {
        context: 'edit',
        attributes: {
          style: 'multiline'
        }
      });
    }
  };

}).call(this);
