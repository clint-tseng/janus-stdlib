// Generated by CoffeeScript 1.11.1
(function() {
  var $, Base, DomView, MultilineTextAttributeEditView, Text, TextAttributeEditView, Varying, find, from, ref, template,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('janus'), Varying = ref.Varying, DomView = ref.DomView, from = ref.from, template = ref.template, find = ref.find, Base = ref.Base;

  Text = require('janus').attribute.Text;

  $ = require('janus-dollar');

  TextAttributeEditView = DomView.build($('<input/>'), template(find('input').attr('type', from.self().map(function(view) {
    var ref1;
    return (ref1 = view.options.type) != null ? ref1 : 'text';
  })).attr('placeholder', from.self().flatMap(function(view) {
    var ref1;
    return (ref1 = view.options.placeholder) != null ? ref1 : '';
  })).prop('value', from(function(subject) {
    return subject.watchValue();
  })).on('input change', function(event, subject) {
    return subject.setValue(event.target.value);
  })));

  MultilineTextAttributeEditView = (function(superClass) {
    extend(MultilineTextAttributeEditView, superClass);

    function MultilineTextAttributeEditView() {
      return MultilineTextAttributeEditView.__super__.constructor.apply(this, arguments);
    }

    MultilineTextAttributeEditView.prototype.dom = function() {
      return $('<textarea/>');
    };

    return MultilineTextAttributeEditView;

  })(TextAttributeEditView);

  module.exports = {
    TextAttributeEditView: TextAttributeEditView,
    MultilineTextAttributeEditView: MultilineTextAttributeEditView,
    registerWith: function(library) {
      library.register(Text, TextAttributeEditView, {
        context: 'edit'
      });
      return library.register(Text, MultilineTextAttributeEditView, {
        context: 'edit',
        style: 'multiline'
      });
    }
  };

}).call(this);
